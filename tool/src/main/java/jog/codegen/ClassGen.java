package jog.codegen;

import jog.ast.expr.BinNode;
import jog.ast.visitor.CodeGenUtil.ValType;
import jog.util.IOUtil;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Collectors;

public class ClassGen {
    private final BinNode.NodeType type;
    private final List<PatternV> patterns;
    private final String outputDir;
    private final ValType valType;

    public ClassGen(BinNode.NodeType type, Collection<PatternV> patterns, String outputDir) {
        if (patterns.isEmpty()) {
            throw new IllegalArgumentException("No patterns to test.");
        }
        Set<ValType> valTypes = patterns.stream()
                .map(PatternV::getValType)
                .collect(Collectors.toSet());
        if (valTypes.size() != 1) {
            throw new IllegalArgumentException("Patterns have different value types.");
        }
        this.valType = valTypes.iterator().next();
        this.type = type;
        this.patterns = new LinkedList<>(patterns);
        this.outputDir = outputDir;
        IOUtil.createDir(outputDir);
    }

    public void generateCode() {
        StringBuilder sb = new StringBuilder();
        String names = patterns.stream()
                .map(PatternV::getName)
                .collect(Collectors.joining(",\n"));
        sb.append("/* Automatically generated by jog from patterns: \n")
                .append(names)
                .append(". */\n");
        sb.append("Node* ")
                .append(type.toCodeGen(valType)).append("::Ideal")
                .append("(PhaseGVN *phase, bool can_reshape) {\n");
        // Generate one block for for each pattern
        StringJoiner sj = new StringJoiner("\n");
        for (PatternV pattern : patterns) {
            pattern.translate();
            String singlePatternCode = "// " + pattern.getName() + "\n" +
                    pattern.getTranslation();
            sj.add(singlePatternCode);
        }
        sb.append(sj.toString());
        sb.append("}\n");
        IOUtil.writeToFile(outputDir, type.toCppFileName() + ".cpp", sb.toString());
    }
}
